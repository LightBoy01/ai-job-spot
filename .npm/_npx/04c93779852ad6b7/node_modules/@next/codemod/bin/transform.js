"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformerDirectory = exports.jscodeshiftExecutable = void 0;
exports.runTransform = runTransform;
const execa_1 = __importDefault(require("execa"));
const globby_1 = __importDefault(require("globby"));
const prompts_1 = __importDefault(require("prompts"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const node_path_1 = require("node:path");
const handle_package_1 = require("../lib/handle-package");
const utils_1 = require("../lib/utils");
function expandFilePathsIfNeeded(filesBeforeExpansion) {
    const shouldExpandFiles = filesBeforeExpansion.some((file) => file.includes('*'));
    return shouldExpandFiles
        ? globby_1.default.sync(filesBeforeExpansion)
        : filesBeforeExpansion;
}
exports.jscodeshiftExecutable = require.resolve('.bin/jscodeshift');
exports.transformerDirectory = (0, node_path_1.join)(__dirname, '../', 'transforms');
async function runTransform(transform, path, options) {
    let transformer = transform;
    let directory = path;
    if (!options.dry) {
        (0, utils_1.checkGitStatus)(options.force);
    }
    if (transform &&
        !utils_1.TRANSFORMER_INQUIRER_CHOICES.find((x) => x.value === transform)) {
        console.error('Invalid transform choice, pick one of:');
        console.error(utils_1.TRANSFORMER_INQUIRER_CHOICES.map((x) => '- ' + x.value).join('\n'));
        process.exit(1);
    }
    if (!path) {
        const res = await (0, prompts_1.default)({
            type: 'text',
            name: 'path',
            message: 'On which files or directory should the codemods be applied?',
            initial: '.',
        }, { onCancel: utils_1.onCancel });
        directory = res.path;
    }
    if (!transform) {
        const res = await (0, prompts_1.default)({
            type: 'select',
            name: 'transformer',
            message: 'Which transform would you like to apply?',
            choices: utils_1.TRANSFORMER_INQUIRER_CHOICES.reverse().map(({ title, value, version }) => {
                return {
                    title: `(v${version}) ${value}`,
                    description: title,
                    value,
                };
            }),
        }, { onCancel: utils_1.onCancel });
        transformer = res.transformer;
    }
    if (transformer === 'next-request-geo-ip') {
        const { isAppDeployedToVercel } = await (0, prompts_1.default)({
            type: 'confirm',
            name: 'isAppDeployedToVercel',
            message: 'Is your app deployed to Vercel? (Required to apply the selected codemod)',
            initial: true,
        }, { onCancel: utils_1.onCancel });
        if (!isAppDeployedToVercel) {
            console.log('Skipping codemod "next-request-geo-ip" as your app is not deployed to Vercel.');
            return;
        }
    }
    const filesExpanded = expandFilePathsIfNeeded([directory]);
    if (!filesExpanded.length) {
        console.log(`No files found matching "${directory}"`);
        return null;
    }
    const transformerPath = (0, node_path_1.join)(exports.transformerDirectory, `${transformer}.js`);
    if (transformer === 'cra-to-next') {
        // cra-to-next transform doesn't use jscodeshift directly
        return require(transformerPath).default(filesExpanded, options);
    }
    let args = [];
    const { dry, print, runInBand, jscodeshift, verbose } = options;
    if (dry) {
        args.push('--dry');
    }
    if (print) {
        args.push('--print');
    }
    if (runInBand) {
        args.push('--run-in-band');
    }
    if (verbose) {
        args.push('--verbose=2');
    }
    args.push('--no-babel');
    args.push('--ignore-pattern=**/node_modules/**');
    args.push('--ignore-pattern=**/.next/**');
    args.push('--extensions=tsx,ts,jsx,js');
    args = args.concat(['--transform', transformerPath]);
    if (jscodeshift) {
        args = args.concat(jscodeshift);
    }
    args = args.concat(filesExpanded);
    console.log(`Executing command: jscodeshift ${args.join(' ')}`);
    const execaChildProcess = (0, execa_1.default)(exports.jscodeshiftExecutable, args, {
        // include ANSI color codes
        // Note: execa merges env with existing env by default.
        env: process.stdout.isTTY ? { FORCE_COLOR: 'true' } : {},
    });
    // "\n" + "a\n" + "b\n"
    let lastThreeLineBreaks = '';
    if (execaChildProcess.stdout) {
        execaChildProcess.stdout.pipe(process.stdout);
        execaChildProcess.stderr.pipe(process.stderr);
        // The last two lines contain the successful transformation count as "N ok".
        // To save memory, we "slide the window" to keep only the last three line breaks.
        // We save three line breaks because the EOL is always "\n".
        execaChildProcess.stdout.on('data', (chunk) => {
            lastThreeLineBreaks += chunk.toString('utf-8');
            let cutoff = lastThreeLineBreaks.length;
            // Note: the stdout ends with "\n".
            // "foo\n" + "bar\n" + "baz\n" -> "\nbar\nbaz\n"
            // "\n" + "foo\n" + "bar\n" -> "\nfoo\nbar\n"
            for (let i = 0; i < 3; i++) {
                cutoff = lastThreeLineBreaks.lastIndexOf('\n', cutoff) - 1;
            }
            if (cutoff > 0 && cutoff < lastThreeLineBreaks.length) {
                lastThreeLineBreaks = lastThreeLineBreaks.slice(cutoff + 1);
            }
        });
    }
    try {
        const result = await execaChildProcess;
        if (result.failed) {
            throw new Error(`jscodeshift exited with code ${result.exitCode}`);
        }
    }
    catch (error) {
        throw error;
    }
    // With ANSI color codes, it will be "\x1B[39m\x1B[32m0 ok".
    // Without, it will be "0 ok".
    const targetOkLine = lastThreeLineBreaks.split('\n').at(-3);
    if (!targetOkLine.endsWith('ok')) {
        throw new Error(`Failed to parse the successful transformation count "${targetOkLine}". This is a bug in the codemod tool.`);
    }
    const stripped = (0, strip_ansi_1.default)(targetOkLine);
    // "N ok" -> "N"
    const parsedNum = parseInt(stripped.split(' ')[0], 10);
    const hasChanges = parsedNum > 0;
    if (!dry && transformer === 'built-in-next-font' && hasChanges) {
        const { uninstallNextFont } = await (0, prompts_1.default)({
            type: 'confirm',
            name: 'uninstallNextFont',
            message: '`built-in-next-font` should have removed all usages of `@next/font`. Do you want to uninstall `@next/font`?',
            initial: true,
        }, { onCancel: utils_1.onCancel });
        if (uninstallNextFont) {
            console.log('Uninstalling `@next/font`');
            (0, handle_package_1.uninstallPackage)('@next/font');
        }
    }
    // When has changes, it requires `@vercel/functions`, so skip prompt.
    if (!dry && transformer === 'next-request-geo-ip' && hasChanges) {
        console.log('Installing `@vercel/functions` because the `next-request-geo-ip` made changes.');
        (0, handle_package_1.installPackages)(['@vercel/functions']);
    }
}
//# sourceMappingURL=transform.js.map