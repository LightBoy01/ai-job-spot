"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPkgManager = getPkgManager;
exports.uninstallPackage = uninstallPackage;
exports.installPackages = installPackages;
exports.runInstallation = runInstallation;
exports.addPackageDependency = addPackageDependency;
const find_up_1 = __importDefault(require("find-up"));
const execa_1 = __importDefault(require("execa"));
const node_path_1 = require("node:path");
function getPkgManager(baseDir) {
    try {
        const lockFile = find_up_1.default.sync([
            'package-lock.json',
            'yarn.lock',
            'pnpm-lock.yaml',
            'bun.lock',
            'bun.lockb',
        ], { cwd: baseDir });
        if (lockFile) {
            switch ((0, node_path_1.basename)(lockFile)) {
                case 'package-lock.json':
                    return 'npm';
                case 'yarn.lock':
                    return 'yarn';
                case 'pnpm-lock.yaml':
                    return 'pnpm';
                case 'bun.lock':
                case 'bun.lockb':
                    return 'bun';
                default:
                    return 'npm';
            }
        }
    }
    catch {
        return 'npm';
    }
}
function uninstallPackage(packageToUninstall, pkgManager) {
    pkgManager ??= getPkgManager(process.cwd());
    if (!pkgManager)
        throw new Error('Failed to find package manager');
    let command = 'uninstall';
    if (pkgManager === 'yarn') {
        command = 'remove';
    }
    try {
        execa_1.default.sync(pkgManager, [command, packageToUninstall], {
            stdio: 'inherit',
            shell: true,
        });
    }
    catch (error) {
        throw new Error(`Failed to uninstall "${packageToUninstall}". Please uninstall it manually.`, { cause: error });
    }
}
const ADD_CMD_FLAG = {
    npm: 'install',
    yarn: 'add',
    pnpm: 'add',
    bun: 'add',
};
const DEV_DEP_FLAG = {
    npm: '--save-dev',
    yarn: '--dev',
    pnpm: '--save-dev',
    bun: '--dev',
};
function installPackages(packageToInstall, options = {}) {
    if (packageToInstall.length === 0)
        return;
    const { packageManager = getPkgManager(process.cwd()), silent = false, dev = false, } = options;
    if (!packageManager)
        throw new Error('Failed to find package manager');
    const addCmd = ADD_CMD_FLAG[packageManager];
    const devDepFlag = dev ? DEV_DEP_FLAG[packageManager] : undefined;
    const installFlags = [addCmd];
    if (devDepFlag) {
        installFlags.push(devDepFlag);
    }
    try {
        execa_1.default.sync(packageManager, [...installFlags, ...packageToInstall], {
            // Keeping stderr since it'll likely be relevant later when it fails.
            stdio: silent ? ['ignore', 'ignore', 'inherit'] : 'inherit',
            shell: true,
        });
    }
    catch (error) {
        throw new Error(`Failed to install "${packageToInstall}". Please install it manually.`, { cause: error });
    }
}
function runInstallation(packageManager, options) {
    try {
        execa_1.default.sync(packageManager, ['install'], {
            cwd: options.cwd,
            stdio: 'inherit',
            shell: true,
        });
    }
    catch (error) {
        throw new Error('Failed to install dependencies', { cause: error });
    }
}
function addPackageDependency(packageJson, name, version, dev) {
    if (dev) {
        packageJson.devDependencies = packageJson.devDependencies || {};
    }
    else {
        packageJson.dependencies = packageJson.dependencies || {};
    }
    const deps = dev ? packageJson.devDependencies : packageJson.dependencies;
    deps[name] = version;
}
//# sourceMappingURL=handle-package.js.map